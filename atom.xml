<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Julian&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-03T12:43:38.760Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Julian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>W3school离线手册</title>
    <link href="http://example.com/2022/04/03/w3school/"/>
    <id>http://example.com/2022/04/03/w3school/</id>
    <published>2022-04-03T12:42:30.000Z</published>
    <updated>2022-04-03T12:43:38.760Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="bash">链接：https://pan.baidu.com/s/1TSoF8mSfrPdwpFFxcsYLnw 提取码：f86i</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;链接：https://pan.baidu.com/s/1TSoF8mSfrPdwpFFxcsYLnw 
提取码：f86i
&lt;/code&gt;&lt;/pre&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux常用命令(一)</title>
    <link href="http://example.com/2022/04/01/Linux/"/>
    <id>http://example.com/2022/04/01/Linux/</id>
    <published>2022-04-01T12:23:38.000Z</published>
    <updated>2022-04-01T13:24:22.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关机-x2F-重启-x2F-注销"><a href="#关机-x2F-重启-x2F-注销" class="headerlink" title="关机&#x2F;重启&#x2F;注销"></a>关机&#x2F;重启&#x2F;注销</h2><pre><code class="bash">shutdown -h now                        即刻关机shutdown -h 10                         10分钟后关机shutdown -h 11:00                      11:00关机shutdown -h +10                        预定时间关机(十分钟后)shutdown -c                            取消指定时间关机shutdown -r now                        重启shutdown -r 10                         十分钟后重启shutdown -r 11:00                      定时重启reboot                                 重启init 6                                 重启init 0                                 立刻关机telinit    0                           关机poweroff                              立刻关机halt                                  关机    sync                                  buff数据同步到磁盘logout                                退出登录Shell</code></pre><h2 id="系统信息和性能查看"><a href="#系统信息和性能查看" class="headerlink" title="系统信息和性能查看"></a>系统信息和性能查看</h2><pre><code class="bash">uname -a                             查看内核/OS/CPU信息uname -r                             查看内核版本uname -m                             查看处理器架构arch                                 查看处理器架构hostname                             查看计算机名who                                  显示当前登录系统的用户who am i                             显示登录时的用户名whoami                               显示当前用户名cat /proc/version                    查看linux版本信息car /proc/cpuinfo                    查看CPU信息cat /proc/interrupts                 查看中断cat /proc/loadavg                    查看系统负载uptime                               查看系统运行时间、用户数、负载env                                  查看系统的环境变量lsusb -tv                            查看系统USB设备信息lspci -tv                            查看系统PCI设备信息lsmod                                查看已加载的系统模块grep MemTotal /proc/meminfo          查看内存总量grep MemFree /proc/meminfo           查看空闲内存量free -m                              查看内存用量和交换区用量date                                 显示系统日期时间cal 2021                             显示2021日历表top                                  动态显示cpu/内存/进程等情况vmstat 1 20                          每1秒采一次系统状态，采20次iostat                               查看io读写/cpu使用情况sar -u 1 10                          查看cpu使用情况 (1秒一次，共10次)sar -d 1 10                          查询磁盘性能</code></pre><h2 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h2><pre><code class="bash">fdisk -l                              查看所有磁盘分区swapon -s                             查看所有交换分区df -h                                 查看磁盘使用情况及挂载点df -hl                                同上du -sh /dir                           查看指定某个目录的大小du -sk * | sort -rn                   从高到低依次显示文件和目录大小mount /dev/hda2 /mnt/hda2             挂载hda2盘mount -t ntfs /dev/sdc1 /mnt/usbhd1   指定文件系统类型挂载(如ntfs)mount -o loop xxx.iso /mnt/cdrom      挂载iso文件mount /dev/sda1 /mnt/usbdisk          挂载usb盘/闪存设备umount -v /dev/sda1                   通过设备名卸载umount -v /mnt/mymnt                  通过挂载点卸载fuser -km /mnt/hda1                   强制卸载 (慎用)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关机-x2F-重启-x2F-注销&quot;&gt;&lt;a href=&quot;#关机-x2F-重启-x2F-注销&quot; class=&quot;headerlink&quot; title=&quot;关机&amp;#x2F;重启&amp;#x2F;注销&quot;&gt;&lt;/a&gt;关机&amp;#x2F;重启&amp;#x2F;注销&lt;/h2&gt;&lt;pre&gt;&lt;code cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>从0到1，搭建个人博客</title>
    <link href="http://example.com/2022/03/26/course/"/>
    <id>http://example.com/2022/03/26/course/</id>
    <published>2022-03-26T05:22:16.000Z</published>
    <updated>2022-03-26T06:29:14.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="1，准备一个Github账号，官网：https-github-com"><a href="#1，准备一个Github账号，官网：https-github-com" class="headerlink" title="1，准备一个Github账号，官网：https://github.com/"></a>1，准备一个Github账号，官网：<a href="https://github.com/">https://github.com/</a></h3><h3 id="2，下载nodejs，官网：https-nodejs-org"><a href="#2，下载nodejs，官网：https-nodejs-org" class="headerlink" title="2，下载nodejs，官网：https://nodejs.org/"></a>2，下载nodejs，官网：<a href="https://nodejs.org/">https://nodejs.org/</a></h3><h3 id="3，下载Git-官网：https-git-scm-com"><a href="#3，下载Git-官网：https-git-scm-com" class="headerlink" title="3，下载Git,官网：https://git-scm.com/"></a>3，下载Git,官网：<a href="https://git-scm.com/">https://git-scm.com/</a></h3><h2 id="开始搭建个人博客"><a href="#开始搭建个人博客" class="headerlink" title="开始搭建个人博客"></a>开始搭建个人博客</h2><h3 id="创建一个文件夹存储博客的文件，比如Blog。在当前文件夹下右击，选择git-bash-here-使用git进行接下来的操作"><a href="#创建一个文件夹存储博客的文件，比如Blog。在当前文件夹下右击，选择git-bash-here-使用git进行接下来的操作" class="headerlink" title="创建一个文件夹存储博客的文件，比如Blog。在当前文件夹下右击，选择git bash here,使用git进行接下来的操作"></a>创建一个文件夹存储博客的文件，比如Blog。在当前文件夹下右击，选择git bash here,使用git进行接下来的操作</h3><h3 id="检查nodejs是否安装成功"><a href="#检查nodejs是否安装成功" class="headerlink" title="检查nodejs是否安装成功"></a>检查nodejs是否安装成功</h3><pre><code class="bash">$ node -v$ npm -v</code></pre><h3 id="安装hexo，借助npm工具安装hexo，由于国内镜像源很慢，所以我们利用npm安装cnpm"><a href="#安装hexo，借助npm工具安装hexo，由于国内镜像源很慢，所以我们利用npm安装cnpm" class="headerlink" title="安装hexo，借助npm工具安装hexo，由于国内镜像源很慢，所以我们利用npm安装cnpm"></a>安装hexo，借助npm工具安装hexo，由于国内镜像源很慢，所以我们利用npm安装cnpm</h3><pre><code class="bash">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h3 id="检查cnpm是否安装成功"><a href="#检查cnpm是否安装成功" class="headerlink" title="检查cnpm是否安装成功"></a>检查cnpm是否安装成功</h3><pre><code class="bash">$ cnpm -v</code></pre><h3 id="借助cnpm安装hexo"><a href="#借助cnpm安装hexo" class="headerlink" title="借助cnpm安装hexo"></a>借助cnpm安装hexo</h3><pre><code class="bash">$ cnpm install -g hexo-cli</code></pre><h3 id="检查hexo是否安装成功"><a href="#检查hexo是否安装成功" class="headerlink" title="检查hexo是否安装成功"></a>检查hexo是否安装成功</h3><pre><code class="bash">$ hexo -v</code></pre><h3 id="创建一个文件夹，存放个人博格的所有文件，比如Blog"><a href="#创建一个文件夹，存放个人博格的所有文件，比如Blog" class="headerlink" title="创建一个文件夹，存放个人博格的所有文件，比如Blog"></a>创建一个文件夹，存放个人博格的所有文件，比如Blog</h3><pre><code class="bash">$ mkdir Blog</code></pre><h3 id="进入博客文件夹，初始化博客"><a href="#进入博客文件夹，初始化博客" class="headerlink" title="进入博客文件夹，初始化博客"></a>进入博客文件夹，初始化博客</h3><pre><code class="bash">$ cd Blog$ hexo init</code></pre><h3 id="博客到此便安装完成了，接下来启动博客"><a href="#博客到此便安装完成了，接下来启动博客" class="headerlink" title="博客到此便安装完成了，接下来启动博客"></a>博客到此便安装完成了，接下来启动博客</h3><pre><code class="bash">hexo s</code></pre><h3 id="可以看到，博客在本地4000端口启动了，到浏览器输入网址，查看博客"><a href="#可以看到，博客在本地4000端口启动了，到浏览器输入网址，查看博客" class="headerlink" title="可以看到，博客在本地4000端口启动了，到浏览器输入网址，查看博客"></a>可以看到，博客在本地4000端口启动了，到浏览器输入网址，查看博客</h3><h3 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h3><pre><code class="bash">hexo n &quot;我的第一篇个人博客&quot;</code></pre><h3 id="进入post文件夹，可以看到我的第一篇个人博客-md创建成功"><a href="#进入post文件夹，可以看到我的第一篇个人博客-md创建成功" class="headerlink" title="进入post文件夹，可以看到我的第一篇个人博客.md创建成功"></a>进入post文件夹，可以看到我的第一篇个人博客.md创建成功</h3><h3 id="对内容进行编辑"><a href="#对内容进行编辑" class="headerlink" title="对内容进行编辑"></a>对内容进行编辑</h3><pre><code class="bash">$ cd /source/_posts$ vim 我的第一篇个人博客.md</code></pre><h3 id="回到Blog文件夹，生成博客"><a href="#回到Blog文件夹，生成博客" class="headerlink" title="回到Blog文件夹，生成博客"></a>回到Blog文件夹，生成博客</h3><pre><code class="bash">$ hexo g</code></pre><h3 id="生成后，然后启动，便可以看到自己的博客"><a href="#生成后，然后启动，便可以看到自己的博客" class="headerlink" title="生成后，然后启动，便可以看到自己的博客"></a>生成后，然后启动，便可以看到自己的博客</h3><h2 id="接下来将博客部署到Github上，公开使用"><a href="#接下来将博客部署到Github上，公开使用" class="headerlink" title="接下来将博客部署到Github上，公开使用"></a>接下来将博客部署到Github上，公开使用</h2><h3 id="登录Githu，点击右上角的加号，选择New-repository，创建一个新仓库"><a href="#登录Githu，点击右上角的加号，选择New-repository，创建一个新仓库" class="headerlink" title="登录Githu，点击右上角的加号，选择New repository，创建一个新仓库"></a>登录Githu，点击右上角的加号，选择New repository，创建一个新仓库</h3><h3 id="名字命名一定是你的Github的昵称加上github-io-比如：mrli8023-github-io"><a href="#名字命名一定是你的Github的昵称加上github-io-比如：mrli8023-github-io" class="headerlink" title="名字命名一定是你的Github的昵称加上github.io,比如：mrli8023.github.io"></a>名字命名一定是你的Github的昵称加上github.io,比如：mrli8023.github.io</h3><h3 id="描述随便写，比如：我的个人博客"><a href="#描述随便写，比如：我的个人博客" class="headerlink" title="描述随便写，比如：我的个人博客"></a>描述随便写，比如：我的个人博客</h3><h3 id="公开和私有，选择public"><a href="#公开和私有，选择public" class="headerlink" title="公开和私有，选择public"></a>公开和私有，选择public</h3><h3 id="最后创建仓库Create-repository"><a href="#最后创建仓库Create-repository" class="headerlink" title="最后创建仓库Create repository"></a>最后创建仓库Create repository</h3><h3 id="到此，Github的仓库创建便完成了，回到Git进行操作"><a href="#到此，Github的仓库创建便完成了，回到Git进行操作" class="headerlink" title="到此，Github的仓库创建便完成了，回到Git进行操作"></a>到此，Github的仓库创建便完成了，回到Git进行操作</h3><h2 id="在Blog目录下，下载一个用来上传的插件"><a href="#在Blog目录下，下载一个用来上传的插件" class="headerlink" title="在Blog目录下，下载一个用来上传的插件"></a>在Blog目录下，下载一个用来上传的插件</h2><pre><code class="bash">$ cnpm install --save hexo-deployer-git</code></pre><p>如果有Warring,直接忽略就行</p><h3 id="设置-config-yml文件"><a href="#设置-config-yml文件" class="headerlink" title="设置_config.yml文件"></a>设置_config.yml文件</h3><h3 id="在deployer处进行设置"><a href="#在deployer处进行设置" class="headerlink" title="在deployer处进行设置"></a>在deployer处进行设置</h3><pre><code class="bash">type: gitrepo: 这里是你github仓库的地址，比如：https://github.com/Mrli8023/page.gitbranch: master</code></pre><p>保存退出</p><h3 id="接下来部署到远端"><a href="#接下来部署到远端" class="headerlink" title="接下来部署到远端"></a>接下来部署到远端</h3><pre><code class="bash">$ hexo d</code></pre><p>会提示输入Github的账号和密码<br>如果出错，我们可以设置ssh免密登录<br>解决办法：<a href="https://blog.csdn.net/weixin_42186644/article/details/103655412">https://blog.csdn.net/weixin_42186644/article/details/103655412</a></p><h3 id="部署完成后，在Github仓库刷新，便可以看到多了很多东西"><a href="#部署完成后，在Github仓库刷新，便可以看到多了很多东西" class="headerlink" title="部署完成后，在Github仓库刷新，便可以看到多了很多东西"></a>部署完成后，在Github仓库刷新，便可以看到多了很多东西</h3><h3 id="接下来，在浏览器输入地址，便可以访问博客了，比如：https-mrli8023-github-io"><a href="#接下来，在浏览器输入地址，便可以访问博客了，比如：https-mrli8023-github-io" class="headerlink" title="接下来，在浏览器输入地址，便可以访问博客了，比如：https://mrli8023.github.io/"></a>接下来，在浏览器输入地址，便可以访问博客了，比如：<a href="https://mrli8023.github.io/">https://mrli8023.github.io/</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;1，准备一个Github账号，官网：https-github-com&quot;&gt;&lt;a href=&quot;#1，准备一个Githu</summary>
      
    
    
    
    
  </entry>
  
</feed>
